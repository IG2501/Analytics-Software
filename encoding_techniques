#Categorical feature encoding is an important pre-processing step for using these 
#features into machine learning models etc. 

#For demonstrating the various encoding techniques we will use the HairEyeColor
#dataset, which have Hair, Eye and Sex as categorical features

library(datasets)
data <- data.frame(HairEyeColor)
str(data)

levels(data$Hair)
levels(data$Eye)
levels(data$Sex)

#I.) Binary Encoding
#Numbers are converted to binary number, and the representation of binary numbers 
#is stored as multiple columns, where each column takes value 0 or 1.
#Binary encoding can handle categorical variables with a large number of categories
#It reduces the dimensionality of the data by representing each category.

data_binary <- data

#function to use bits to represent the categorical values
binary <- function(x, col,col_name) {
  #get the number of categories
  cat_level <- length(levels(col)) 
  #find the maximum number of bits required for the column
  max_bits <- ceiling(log2(cat_level))
  #iterate through maximum bits to the bit columns
  for (i in 1:max_bits) {
    #find the rightmost bit
    right_bit <- (as.numeric(col) - 1) %% 2
    x[paste(col_name, i)] <- right_bit
    #integer division to shifts binary representation to the right
    col <- as.numeric(col) %/% 2
  }
  return(x)
}

#encode the columns
binary_encoded <- binary(data_binary,data$Hair,"Hair")
binary_encoded <- binary(binary_encoded,data$Eye,"Eye")
binary_encoded <- binary(binary_encoded,data$Eye,"Sex")
str(binary_encoded)

#II.) Hash Encoding
#It replaces categories with hash values.Hash values, are fixed-length strings of characters
#or numbers generated by applying a hash function .Hash values represent the data in a condensed and unique way.
#It reduces the dimensionality of the dataset and is computationally efficient.

library(FeatureHashing)
data_hash <- data

#When selecting a hash.size, it's generally a good practice to choose
#a size that is greater than or equal to the total number of unique categories
#across all the variables you are hashing. We have a total of
#4 + 4 + 2 = 10 unique categories. We use 

encoded_hash <- hashed.model.matrix(c("Hair","Eye","Sex"),data_hash,hash.size = 2^5,create.mapping = TRUE)
str(encoded_hash)

hash_map <- hash.mapping(encoded_hash)
hash_map

#Different hash.size can be experimented with to see which one works best for the data (Memory effiecient and less collisions).

#III.) Ordinal/Label Encoding
#Convert the factor values to unique number to represent each category.
#Utilized for variables with lesser number of categories (unique value)
#May introduce unexpected heirarchy or ordering into the data

data_label <- data

data_label$Hair <- as.numeric(data_label$Hair)
data_label$Eye <- as.numeric(data_label$Eye)
data_label$Sex <- as.numeric(data_label$Sex)

str(data_label)

#IV.) One-Hot Encoding
#Columns are added for each category for the categorical variables.
#Each of these columns have binary values (1 or 0), where 1 represents the category.
#One of the most preferred encoding methods
#Can be used for higher number of categories, the downside is that it increases dimensionality

#Method 1
data_ohe <- data
encode_var <- model.matrix(~ data_ohe$Hair + data_ohe$Eye + data_ohe$Sex-1, data = data_ohe)
encode_data <- data.frame(encode_var)
str(encode_data)

#add the encoded data to the original
data_ohe <- cbind(data,encode_data)
str(data_ohe)
head(data_ohe)

#Method 2
#can have more control over the encoding process
library(caret)
encode_var2 <- predict(dummyVars(~., data = data[1:3]), newdata = data)
encode_data2 <- as.data.frame(encode_var2)
str(encode_data2)

#add the encoded data to the original
data_ohe2 <- cbind(data,encode_data2)
str(data_ohe2)
head(data_ohe2)

#V.) Frequency Encoding
#Convert the factor values to the frequency number of the category to represent each category.
#Utilized for variables with lesser number of categories (unique value)
#May introduce unexpected heirarchy or ordering into the data
category <-  c("A","A", "B", "A", "C", "B", "C", "A", "C", "D", "D","A", "B", "A", "C", "B", "C", "A","B", "C", "D", "D")
datafreq <- data.frame(category)
datafreq$category <- as.factor(datafreq$category)
count <- table(datafreq$category)
count
#match the frequency to the column
datafreq$encoding <- sapply(datafreq$category,function(cat) count[cat])
str(datafreq)
